---
- name: Reverse-words in OpenShift (the access to the cluster has been provided using env vars)
  hosts: localhost
  connection: local

  vars:
    downloadpath: /srv/git
    oc_host: "{{ lookup('env','K8S_AUTH_HOST') }}"
    oc_user: "{{ lookup('env','K8S_AUTH_USERNAME') }}"
    oc_pass: "{{ lookup('env','K8S_AUTH_PASSWORD') }}"

  tasks:
    - debug: Env vars
        msg: "{{ oc_host }}" 
    
  - name: Get reverse-words deployment from git
    get_url:
      url: "https://github.com/avaleror/kubestuff/blob/master/reverse-words-master/reverse-deploy.yaml"
      dest: /srv/git
      mode: 0755

  - name: Get reverse-words Service from git
    get_url:
      url: "https://github.com/avaleror/kubestuff/blob/master/reverse-words-master/reverse-service.yaml"
      dest: /srv/git
      mode: 0755

  - name: Get reverse-words route from git
    get_url:
      url: "https://github.com/avaleror/kubestuff/blob/master/reverse-words-master/route-reverse.yaml"
      dest: /srv/git
      mode: 0755
  
  - name: Login in OpenShift
    shell: oc login "{{ oc_host }} -u {{ oc_user }} -p {{ oc_pass }}"
    
  - name: Create reverse words deployment from file
    shell: oc create -f "{{ downloadpath }}/reverse-deploy.yaml"

#  - name: Create a Deployment object by reading the definition from a file
#    k8s:
#      state: present
#      src: "{{ downloadpath }}/reverse-deploy.yaml"

  - name: Ensure ArgoCD template is instantiated
    shell: oc create -f "{{ downloadpath }}/reverse-service.yaml"
    
#  - name: Create a Service object by reading the definition from a file
#    k8s:
#      state: present
#      src: "{{ downloadpath }}/reverse-service.yaml"


  - name: Ensure ArgoCD template is instantiated
    shell: oc create -f "{{ downloadpath }}/route-reverse.yaml"
    
#  - name: Create a route to our service inside the cluster
#    k8s:
#      state: present
#      src: "{{ downloadpath }}/route-reverse.yaml"

  - name: Logout OpenShift
    shell: oc logout
